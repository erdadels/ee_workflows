"""
Earthengine images defined in Python. The Python API is very similar to the
JavaScript, the only difference is that it has to adhere to the Python syntax
"""

from datetime import datetime
import ee


COMPOSITE_COLLECTION = 'projects/igde-work/raster-data/composite-collection'


def ndvi(image):
    """
    Calulate and add NDVI band
    """
    ndvi = image.normalizedDifference(['nir', 'red']).rename('ndvi')
    return image.addBands(ndvi)


def ndmi(image):
    """
    Calculate and add NDMI band
    """
    ndmi = image.normalizedDifference(['nir', 'swir1']).rename('ndmi')
    return image.addBands(ndmi)


def add_year(image):
    """
    Add year band generated from image date
    """
    return image.addBands(
        image.metadata('system:time_start', 'year')
            .divide(1000 * 60 * 60 * 24 * 365)
            .int()
            .add(1970))


def image_name(year): #EA: changed to work with new imagery naming
    """
    Get the image name for a certain year that sits in the middle of the dates
    associated in the image names generated by Ian Housman
    """
    #template = '{}/Landsat_SR_medoid_{}_{}_190_250'
    #return template.format(COMPOSITE_COLLECTION, year-1, year+1)
    template = '{}/Landsat_SR_medoid_{}_{}_152_273' #Jun 1- Sep 30
    return template.format(COMPOSITE_COLLECTION, year, year)

def medoid_image(year):
    """
    Select medoid image by year and add NDVI and NDMI bands
    """
    asset_name = image_name(year)
    image = ee.Image(asset_name
        ).select(['red', 'nir', 'swir1'])
    return ndmi(ndvi(image)).select(['ndmi', 'ndvi'])


def trend_image(var='ndvi', start=2008, end=2018):
    """
    Get a 10 year trend image for summer
    """
    ee.Initialize()
    assetId = COMPOSITE_COLLECTION
    assets = ee.data.getList({'id': assetId})
    images = [ee.Image(item['id']) for item in assets]
    collection = ee.ImageCollection.fromImages(images
        ).map(add_year).map(ndvi).map(ndmi)
    collection = collection.filterDate(
        datetime(start, 1, 1), datetime(end, 12, 31))
    print(
        'Trend image should use 10 images: ', collection.size().getInfo())
    return collection.select('year', var
        ).reduce(ee.Reducer.linearFit()
        ).select('scale').multiply(100000).int16()


def precipation_image(year):
    """
    Get annual (water year) precip image from PRISM
    """
    print(isinstance(year, int))
    assert isinstance(year, int)
    assert year > 1982 and year < 2030
    return ee.ImageCollection('OREGONSTATE/PRISM/AN81d'
        ).filterDate(datetime(year-1, 10, 1), datetime(year, 9, 30)
        ).select(['ppt']).reduce(ee.Reducer.sum()
        ).select(['ppt_sum'], ['pr']).divide(25.4)


def elevation_image(year=None):
    """
    Image representing elevation

    year (unused): for compatibility
    """
    ee.Initialize()
    return ee.Image('USGS/NED').select('elevation').multiply(3.28084).int()
